/*******************************************************************************
 * Copyright (c) 2020 the qc-atlas contributors.
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/

package org.planqk.atlas.core.services;

import java.util.UUID;

import org.planqk.atlas.core.model.ConcreteSolution;
import org.planqk.atlas.core.model.File;
import org.planqk.atlas.core.model.Implementation;
import org.planqk.atlas.core.repository.ConcreteSolutionRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;


public interface ConcreteSolutionService {

    /**
     * Creates a new database entry for a given {@link ConcreteSolution} and save it to the database.
     * <p>
     * The ID of the {@link ConcreteSolutionRepository} parameter should be null, since the ID will be generated by
     * the database when creating the entry. The validation for this is done by the Controller layer, which will reject
     * {@link ConcreteSolutionRepository}s with a given ID in its create path.
     *
     * @param implementationPackage The {@link ConcreteSolutionPackage} that should be saved to the database
     * @return The {@link ConcreteSolutionRepository} object that represents the saved status from the database
     */
    @Transactional
    ConcreteSolution create(ConcreteSolution concreteSolution, UUID patternId);

    /**
     * Creates a {@link File} entry in the database from a multipartfile and links it to a given {@link
     * Implementation}.
     *
     * @param ConcreteSolutionId The ID of the {@link ConcreteSolution} we want the {@link File} to be linked.
     * @param multipartFile           The multipart from which we want to create a File entity and link it to the {@link
     *                                ConcreteSolution}
     * @return The created and linked {@link File}
     */
    File addFileToConcreteSolution(UUID concreteSolutionId, MultipartFile multipartFile);

    /**
     * Retrieve zero or one {@link File} entry from the database of {@link File}s that are linked to the given {@link
     * ConcreteSolution} If no entries are found an empty page is returned.
     *
     * @param concreteSolutionId The ID of the {@link ConcreteSolution} we want find the linked {@link File}
     *                                for
     * @return The page of queried {@link File}.
     */
    File findLinkedFile(UUID concreteSolutionId);

    /**
     * Find a database entry of a {@link ConcreteSolution} that is already saved in the database.
     * <p>
     * If there is no entry found in the database this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param concreteSolutionId The ID of the {@link ConcreteSolution} we want to find
     * @return The {@link ConcreteSolution} with the given ID
     */
    ConcreteSolution findById(UUID concreteSolutionId);

    /**
     * Update an existing {@link ConcreteSolution} database entry by saving the updated {@link
     * ConcreteSolution} object to the the database.
     * <p>
     * The ID of the {@link ConcreteSolution} parameter has to be set to the ID of the database entry we want to
     * update. The validation for this ID to be set is done by the Controller layer, which will reject {@link
     * ConcreteSolution}s without a given ID in its update path. This ID will be used to query the existing {@link
     * ConcreteSolution} entry we want to update. If no {@link ConcreteSolution} entry with the given ID is
     * found this method will throw a {@link java.util.NoSuchElementException}.
     *
     * @param ConcreteSolution The {@link ConcreteSolutionRepository} we want to update with its updated
     *                              properties
     * @return the updated {@link ConcreteSolutionRepository} object that represents the updated status of the
     * database
     */
    @Transactional
    ConcreteSolution update(ConcreteSolution concreteSolution);

    /**
     * Retrieve multiple {@link ConcreteSolution} entries from the database.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter. If the {@link Pageable} is unpaged a
     * {@link Page} with all entries is queried.
     *
     * @param pageable The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link ConcreteSolution} entries
     */
    Page<ConcreteSolution> findAll(Pageable pageable);

    /**
     * Retrieve multiple {@link ConcreteSolution} entries from the database.
     * <p>
     * The amount of entries is based on the given {@link Pageable} parameter. If the {@link Pageable} is unpaged a
     * {@link Page} with all entries is queried.
     *
     * @param pageable The page information, namely page size and page number, of the page we want to retrieve
     * @return The page of queried {@link ConcreteSolution} entries
     */
    Page<ConcreteSolution> findByPatternId(UUID patternId, Pageable pageable);
    
}
